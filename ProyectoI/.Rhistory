p <- ggplot(voto, aes(x=partido_cuanti, y=edad))
p
+ geom_violin()
p <- ggplot(voto, aes(x=partido_cuanti, y=edad)) + geom_violin()
p
p + scale_x_discrete(limits=c("0.5", "2"))
p + scale_x_discrete(limits=c("1", "2"))
p + scale_x_discrete(limits=c("1", "5"))
BSDA::z.test(x = interesPolH, y = interesPol2, sigma.x = desv1, sigma.y = desv2 ,conf.level = 0.90)$conf.int
ICprueba <- BSDA::z.test(x = interesPolH, y = interesPol2, sigma.x = desv1, sigma.y = desv2 ,conf.level = 0.90)$conf.int
ICprueba
ICprueba[0]
ICprueba[1,]
ICprueba[1]
ICprueba
ICprueba[1]
ICprueba[2]
ICprueba <- BSDA::z.test(x = interesPolH, y = interesPol2, sigma.x = desv1, sigma.y = desv2 ,conf.level = 0.90)$conf.int
ICprueba
Li <- ICprueba[1]
Ls <- ICprueba[2]
Li
Ls
BSDA::z.test(x = interesPolH, y = interesPol2, sigma.x = desv1, sigma.y = desv2 ,conf.level = 0.90)$conf.int
Li <- ICprueba[1]
Li
Ls
BSDA::z.test(x = interesPolH, y = interesPol2, sigma.x = desv1, sigma.y = desv2 ,conf.level = 0.90)$conf.int
interesPolH
interesPolH <- Elecciones[Elecciones$edad < 40 ,]$interesPolítica
interesPolH <- as.numeric(interesPolH)
interesPolH
interesPol2 <- as.numeric(interesPol2)
interesPol2
ggplot(Elecciones, aes(Elecciones$interesPolítica, edad)) +
geom_boxplot(alpha = 0.4, color="blue", aes(group = cut_width(interesPolítica,1))
)
rm(list = ls())
library(readxl) #Paquete para leer archivo de excel xlsx
library(PASWR2) #Paquete1 para IC dist Z
library(ggplot2)
library(BSDA) #Paquete 2 para IC Dist Z
library(DataExplorer) #Utilizamos función plot_missing para ver valores nulos
Elecciones <- read_excel("Datos/Elecciones.xlsx")
voto <- na.omit(Elecciones)
plot_missing(Elecciones)
plot_missing(voto)
plot_missing(Elecciones)
Elecciones
View(Elecciones)
View(voto)
View(Elecciones)
class(Elecciones)
class(voto)
class(Elecciones)
library(readxl)
library(epitools)
install.packages("epitools")
library(readxl)
library(epitools)
library(EnvStats)
library(PASWR2)
Elecciones <- read_excel("Datos/Elecciones.xlsx")
Elecciones
Votantes.tradicionales <- Elecciones[Elecciones$PartidoPolítico == "PLN" | Elecciones$PartidoPolítico == "PUSC",]$edad
Elecciones <- read_excel("Datos/Elecciones.xlsx")
Elecciones
class(Elecciones)
Elecciones <- read_excel("Datos/Elecciones.xlsx")
Elecciones
class(Elecciones)
Elecciones <- read_excel("Datos/Elecciones.xlsx")
Elecciones
class(Elecciones)
Votantes.tradicionales <- Elecciones[Elecciones$PartidoPolítico == "PLN" | Elecciones$PartidoPolítico == "PUSC",]$edad
Votantes.tradicionales <- Elecciones[Elecciones$PartidoPolítico == "PLN" | Elecciones$PartidoPolítico == "PUSC",]$edad
Votantes.tradicionales
library(readxl)
library(epitools)
library(EnvStats)
library(PASWR2)
library(readxl)
library(epitools)
library(EnvStats)
library(PASWR2)
library(readxl)
library(epitools)
library(EnvStats)
library(PASWR2)
library(readxl)
library(epitools)
library(EnvStats)
library(PASWR2)
Elecciones <- read_excel("Datos/Elecciones.xlsx")
Elecciones
class(Elecciones)
library(readxl)
library(epitools)
library(EnvStats)
library(PASWR2)
Elecciones <- read_excel("Datos/Elecciones.xlsx")
View(Elecciones)
prueba <- Elecciones[Elecciones$PartidoPolítico == "PLN" | Elecciones$PartidoPolítico == "PUSC",]$edad
View(Elecciones)
Votantes.tradicionales <- Elecciones[Elecciones$partidoPolítico == "PLN" | Elecciones$PartidoPolítico == "PUSC",]$edad
Votantes.tradicionales <- Elecciones[Elecciones$partidoPolítico == "PLN" | Elecciones$partidoPolítico == "PUSC",]$edad
Votantes.tradicionales
Votantes.tradicionales.elegidos <- sample(1:length(Votantes.tradicionales),30,replace = TRUE)
muestra.Votantes.tradicionales <- Votantes.tradicionales[Votantes.tradicionales.elegidos]
muestra.Votantes.tradicionales
t.test(muestra.Votantes.tradicionales,conf.level = 0.95)$conf.int
me.muestra.Votantes.tradicionales <- mean(muestra.Votantes.tradicionales)
de.muestra.Votantes.tradicionales <- sd(muestra.Votantes.tradicionales)
cisim(samples = 100, n = 30, parameter = me.muestra.Votantes.tradicionales, sigma = de.muestra.Votantes.tradicionales, conf.level = 0.95)
MujeresEdad <- Elecciones[Elecciones$sexo == "Mujer" & Elecciones$Estudios == "Universidad completa" ,]$edad
View(Elecciones)
MujeresEdad <- Elecciones[Elecciones$sexo == "Mujer" & Elecciones$estudios == "Universidad completa" ,]$edad
MujeresEdad
HombresEdad <- Elecciones[Elecciones$sexo == "Hombre" & Elecciones$estudios == "Universidad completa" ,]$edad
HombresEdad
set.seed(1000)
MujeresEdad.elegidas <- sample(1:length(MujeresEdad),30,replace = TRUE)
muestra.MujeresEdad <- MujeresEdad[MujeresEdad.elegidas]
muestra.MujeresEdad
set.seed(1000)
HombresEdad.elegidos<- sample(1:length(HombresEdad),30,replace = TRUE)
muestra.HombresEdad <- HombresEdad[HombresEdad.elegidos]
muestra.HombresEdad
t.test(muestra.HombresEdad ,muestra.MujeresEdad ,conf.level = 0.95)$conf.int
t.test(muestra.MujeresEdad,muestra.HombresEdad ,conf.level = 0.95)$conf.int
library(readxl) #Paquete para leer archivo de excel xlsx
library(PASWR2) #Paquete1 para IC dist Z
library(BSDA) #Paquete 2 para IC Dist Z
library(DataExplorer) #Utilizamos función plot_missing para ver valores nulos
library(ggplot2)
Elecciones <- read_excel("Datos/Elecciones.xlsx")
Elecciones
class(Elecciones)
voto <- na.omit(Elecciones)
plot_missing(Elecciones)
voto$partido_cuanti <- ifelse(voto$partidoPolítico == "PLN", 1,
ifelse(voto$partidoPolítico == "PAC", 2,
ifelse(voto$partidoPolítico == "PUSC", 3,
ifelse(voto$partidoPolítico == "PNR", 4,
5))))
voto
ggplot(voto, aes(partido_cuanti))
ggplot(voto, aes(partido_cuanti, edad))
voto$partido_cuanti
ggplot(voto, aes(partido_cuanti, edad)) +
geom_boxplot(alpha = 0.4, color="blue", aes(group = cut_width(partido_cuanti,1))
)
ggplot(voto, aes(partido_cuanti, edad)) +
geom_boxplot(alpha = 0.4, color="blue", aes(group = cut_width(partido_cuanti,1))
)+labs(title = "Titutlo", subtitle = "Subtitulo", y="Edad", x="Partido político")
salario <- Elecciones[Elecciones$edad > 17 & Elecciones$edad < 61,]$salarioMes
#salario <- as.numeric(Elecciones$salarioMes)
salario <- as.numeric(salario)
salario <- salario[ salario > 100]
salarioDE <- sd(salario)
salarioDE
varianza = salarioDE^2
varianza
PASWR2::z.test(x = salario, sigma.x = salarioDE, conf.level = 0.90)$conf.int
BSDA::z.test(x = salario, sigma.x = salarioDE, conf.level = 0.90)$conf.int#comentario
stests::z.test(x = salario, sigma2 = varianza, conf.level = 0.90)$conf.int
interesPolH <- Elecciones[Elecciones$edad < 40 ,]$interesPolítica
interesPol2 <- Elecciones[Elecciones$edad >= 40 ,]$interesPolítica
interesPol2
interesPolH <- as.numeric(interesPolH)
interesPolH
interesPol2 <- as.numeric(interesPol2)
interesPol2
desv1 <- sd(interesPolH)
desv1
desv2 <- na.omit(interesPol2)
desv2
desv2 <- sd(desv2)
desv2
PASWR2::z.test(x = interesPolH, y = interesPol2, sigma.x = desv1, sigma.y = desv2 ,conf.level = 0.90)$conf.int
ICprueba <- BSDA::z.test(x = interesPolH, y = interesPol2, sigma.x = desv1, sigma.y = desv2 ,conf.level = 0.90)$conf.int
BSDA::z.test(x = interesPolH, y = interesPol2, sigma.x = desv1, sigma.y = desv2 ,conf.level = 0.90)$conf.int
ICprueba
Li <- ICprueba[1]
Ls <- ICprueba[2]
Li
Ls
interesPol1 <- Elecciones[Elecciones$edad < 40 ,]$interesPolítica
rm(list = ls())
library(readxl)
library(epitools)
library(EnvStats)
library(PASWR2)
Elecciones <- read_excel("Datos/Elecciones.xlsx")
Elecciones
class(Elecciones)
Votantes.tradicionales <- Elecciones[Elecciones$partidoPolítico == "PLN" | Elecciones$partidoPolítico == "PUSC",]$edad
Votantes.tradicionales
set.seed(1000)
Votantes.tradicionales.elegidos <- sample(1:length(Votantes.tradicionales),30,replace = TRUE)
muestra.Votantes.tradicionales <- Votantes.tradicionales[Votantes.tradicionales.elegidos]
muestra.Votantes.tradicionales
t.test(muestra.Votantes.tradicionales,conf.level = 0.95)$conf.int
me.muestra.Votantes.tradicionales <- mean(muestra.Votantes.tradicionales)
de.muestra.Votantes.tradicionales <- sd(muestra.Votantes.tradicionales)
cisim(samples = 100, n = 30, parameter = me.muestra.Votantes.tradicionales, sigma = de.muestra.Votantes.tradicionales, conf.level = 0.95)
MujeresEdad <- Elecciones[Elecciones$sexo == "Mujer" & Elecciones$estudios == "Universidad completa" ,]$edad
MujeresEdad
HombresEdad <- Elecciones[Elecciones$sexo == "Hombre" & Elecciones$estudios == "Universidad completa" ,]$edad
HombresEdad
set.seed(1000)
MujeresEdad.elegidas <- sample(1:length(MujeresEdad),30,replace = TRUE)
muestra.MujeresEdad <- MujeresEdad[MujeresEdad.elegidas]
muestra.MujeresEdad
set.seed(1000)
HombresEdad.elegidos<- sample(1:length(HombresEdad),30,replace = TRUE)
muestra.HombresEdad <- HombresEdad[HombresEdad.elegidos]
muestra.HombresEdad
t.test(muestra.HombresEdad ,muestra.MujeresEdad ,conf.level = 0.95)$conf.int
t.test(muestra.MujeresEdad,muestra.HombresEdad ,conf.level = 0.95)$conf.int
library(readxl) #Paquete para leer archivo de excel xlsx
library(PASWR2) #Paquete1 para IC dist Z
library(BSDA) #Paquete 2 para IC Dist Z
library(DataExplorer) #Utilizamos función plot_missing para ver valores nulos
library(ggplot2)
Elecciones <- read_excel("Datos/Elecciones.xlsx")
Elecciones
class(Elecciones)
voto <- na.omit(Elecciones)
plot_missing(Elecciones)
voto$partido_cuanti <- ifelse(voto$partidoPolítico == "PLN", 1,
ifelse(voto$partidoPolítico == "PAC", 2,
ifelse(voto$partidoPolítico == "PUSC", 3,
ifelse(voto$partidoPolítico == "PNR", 4,
5))))
voto
ggplot(voto, aes(partido_cuanti))
ggplot(voto, aes(partido_cuanti, edad))
voto$partido_cuanti
ggplot(voto, aes(partido_cuanti, edad)) +
geom_boxplot(alpha = 0.4, color="blue", aes(group = cut_width(partido_cuanti,1))
)
ggplot(voto, aes(partido_cuanti, edad)) +
geom_boxplot(alpha = 0.4, color="blue", aes(group = cut_width(partido_cuanti,1))
)+labs(title = "Titutlo", subtitle = "Subtitulo", y="Edad", x="Partido político")
salario <- Elecciones[Elecciones$edad > 17 & Elecciones$edad < 61,]$salarioMes
#salario <- as.numeric(Elecciones$salarioMes)
salario <- as.numeric(salario)
#salario <- as.numeric(Elecciones$salarioMes)
salario <- as.numeric(salario)
salario <- salario[ salario > 100]
salarioDE <- sd(salario)
salarioDE
varianza = salarioDE^2
varianza
PASWR2::z.test(x = salario, sigma.x = salarioDE, conf.level = 0.90)$conf.int
BSDA::z.test(x = salario, sigma.x = salarioDE, conf.level = 0.90)$conf.int#comentario
stests::z.test(x = salario, sigma2 = varianza, conf.level = 0.90)$conf.int
interesPol1 <- Elecciones[Elecciones$edad < 40 ,]$interesPolítica
interesPol2 <- Elecciones[Elecciones$edad >= 40 ,]$interesPolítica
interesPol2
interesPol1 <- as.numeric(interesPol1)
interesPol1
interesPol2 <- as.numeric(interesPol2)
interesPol2
desvE1 <- sd(interesPol1)
desvE1
desvE2 <- na.omit(interesPol2)
desvE2
desvE2 <- sd(desvE2)
desvE2
PASWR2::z.test(x = interesPolH, y = interesPol2, sigma.x = desv1, sigma.y = desv2 ,conf.level = 0.90)$conf.int
PASWR2::z.test(x = interesPol1, y = interesPol2, sigma.x = desv1, sigma.y = desv2 ,conf.level = 0.90)$conf.int
PASWR2::z.test(x = interesPol1, y = interesPol2, sigma.x = desvE1, sigma.y = desvE2 ,conf.level = 0.90)$conf.int
PASWR2::z.test(x = interesPol1, y = interesPol2, sigma.x = desvE1, sigma.y = desvE2 ,conf.level = 0.90)$conf.int
BSDA::z.test(x = interesPol1, y = interesPol2, sigma.x = desvE1, sigma.y = desvE2 ,conf.level = 0.90)$conf.int
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(PASWR2)
Elecciones <- read_excel("Datos/Elecciones.xlsx")
PLN  <- Elecciones[Elecciones$PartidoPolítico == "PLN" ,]$InteresPolítica
PLN  <- Elecciones[Elecciones$partidoPolítico == "PLN" ,]$InteresPolítica
PLN  <- Elecciones[Elecciones$partidoPolítico == "PLN" ,]$interesPolítica
PLN <-as.numeric(PLN)
TotalPLN  <- Elecciones[Elecciones$partidoPolítico == "PLN",]$salarioMes
View(Elecciones)
TotalPLN  <- Elecciones[Elecciones$partidoPolítico == "PLN",]$salarioMes
CantidadTotalPLN  <- length(TotalPLN)
CantidadTotalPLN
UniversidadPLN  <- Elecciones[Elecciones$estudios == "Universidad completa" &                Elecciones$partidoPolítico == "PLN",]$estudios
CantidadUniversidadPLN  <- length(UniversidadPLN)
CantidadUniversidadPLN
prop.test(x=CantidadUniversidadPLN, n=CantidadTotalPLN, conf.level=0.95)$conf.int
cisim(CantidadTotalPLN, CantidadUniversidadPLN, 0.05, type = "Pi", conf.level = 0.95)
SalarioPLN  <- Elecciones[Elecciones$partidoPolítico == "PLN" & Elecciones$salarioMes >= 400000,]$salarioMes
SalarioPAC  <- Elecciones[Elecciones$partidoPolítico == "PAC" & Elecciones$salarioMes >= 400000 ,]$salarioMes
SalarioPLN <-as.numeric(SalarioPLN)
SalarioPAC <-as.numeric(SalarioPAC)
SalarioPAC
SalarioPLN
CantidadPLN <- length(SalarioPLN)
CantidadPAC <- length(SalarioPAC)
TotalPLN  <- Elecciones[Elecciones$partidoPolítico == "PLN",]$salarioMes
CantidadTotalPLN  <- length(TotalPLN)
TotalPAC  <- Elecciones[Elecciones$partidoPolítico == "PAC",]$salarioMes
CantidadTotalPAC  <- length(TotalPAC)
CantidadTotalPLN
CantidadTotalPAC
prop.test(x = c(CantidadPLN, CantidadPAC), n = c((CantidadTotalPLN), (CantidadTotalPAC)), conf.level = 0.95)$conf.int
rm(list = ls())
library(readxl)
library(EnvStats)
Elecciones <- read_excel("Datos/Elecciones.xlsx")
head(Elecciones )
Población: Mujeres que tengan un salario mensual mayor o igual a 200000.
Variable cuantitativa: salarioMujer.
salarioMujer <- Elecciones[Elecciones$sexo=="Mujer" & Elecciones$salarioMes >= 200000,]$salarioMes
salarioMujer <- as.numeric(salarioMujer)
salarioMujer <- na.omit(salarioMujer)
salarioMujer
varTest(salarioMujer, conf.level = 0.95)$conf.int
personasPLN <- Elecciones[Elecciones$partidoPolítico =="PLN" & Elecciones$edad >=20 & Elecciones$edad <= 70,]$salarioMes
personasPLN <- as.numeric(personasPLN)
personasPLN <- na.omit(personasPLN)
personasPLN
personasPAC <- Elecciones[Elecciones$partidoPolítico =="PAC" & Elecciones$edad >=20 & Elecciones$edad <= 70,]$salarioMes
personasPAC <- as.numeric(personasPAC)
personasPAC <- na.omit(personasPAC)
personasPAC
stests :: var.test(personasPLN, personasPAC,conf.level = 0.95)$conf.int
rm(list = ls())
library(readxl)
library(epitools)
library(EnvStats)
library(PASWR2)
library(readxl)
library(epitools)
library(EnvStats)
library(PASWR2)
#Se carga la base de datos. Se almacena la variable Elecciones para ser manipulada.
Elecciones <- read_excel("Datos/Elecciones.xlsx")
#Mujeres que tengan un salario mensual mayor a 200000.
salarioMujer <- Elecciones[Elecciones$sexo=="Mujer" & Elecciones$salarioMes >= 200000,]$salarioMes
salarioMujer <- as.numeric(salarioMujer)
salarioMujer <- na.omit(salarioMujer)
salarioMujer
varTest(salarioMujer, conf.level = 0.95)$conf.int
stests :: var.test(personasPLN, personasPAC,conf.level = 0.95)$conf.int
#Personas entre 20 y 70 años que siguen al PLN(Partido Liberación Nacional)
personasPLN <- Elecciones[Elecciones$partidoPolítico =="PLN" & Elecciones$edad >=20 & Elecciones$edad <= 70,]$salarioMes
personasPLN <- as.numeric(personasPLN)
personasPLN <- na.omit(personasPLN)
personasPLN
#Personas entre 20 y 70 años que siguen al PLN(Partido Liberación Nacional)
personasPLN <- Elecciones[Elecciones$partidoPolítico =="PLN" & Elecciones$edad >=20 & Elecciones$edad <= 70,]$salarioMes
personasPLN <- as.numeric(personasPLN)
personasPLN <- na.omit(personasPLN)
personasPLN
stests :: var.test(personasPLN, personasPAC,conf.level = 0.95)$conf.int
#Personas entre 20 y 70 años que siguen al PAC(Partido Acción Ciudadana)
personasPAC <- Elecciones[Elecciones$partidoPolítico =="PAC" & Elecciones$edad >=20 & Elecciones$edad <= 70,]$salarioMes
personasPAC <- as.numeric(personasPAC)
personasPAC <- na.omit(personasPAC)
personasPAC
#Personas entre 20 y 70 años que siguen al PAC(Partido Acción Ciudadana)
personasPAC <- Elecciones[Elecciones$partidoPolítico =="PAC" & Elecciones$edad >=20 & Elecciones$edad <= 70,]$salarioMes
personasPAC <- as.numeric(personasPAC)
personasPAC <- na.omit(personasPAC)
personasPAC
stests :: var.test(personasPLN, personasPAC,conf.level = 0.95)$conf.int
library(readxl) #Paquete para leer archivo de excel xlsx
library(epitools)
library(EnvStats)
library(PASWR2) #Paquete que contiene la función z.test para IC Dist Z
library(BSDA) #Paquete#2 que contiene la función z.test para IC Dist Z
library(stests) #Paquete#3 que contiene función z.test para IC Dist Z
library(DataExplorer) #Utilizamos función plot_missing para ver valores nulos
library(ggplot2)
ggplot(voto, aes(partido_cuanti))
#creamos una variable cuantitativa para los partidos politicos
voto$partido_cuanti <- ifelse(voto$partidoPolítico == "PLN", 1,
ifelse(voto$partidoPolítico == "PAC", 2,
ifelse(voto$partidoPolítico == "PUSC", 3,
ifelse(voto$partidoPolítico == "PNR", 4,
5))))
#Gráfico que muestra valores en blanco de la Base de datos Elecciones
plot_missing(Elecciones)
#Se puede observar que la única variable qué presenta datos en blanco es la de partidoPolítico, sin embargo a pesar de eso esta tiene el estado de Good, lo que significa que para trabajar con esa variable está bien.
#creamos una variable cuantitativa para los partidos politicos
voto$partido_cuanti <- ifelse(voto$partidoPolítico == "PLN", 1,
ifelse(voto$partidoPolítico == "PAC", 2,
ifelse(voto$partidoPolítico == "PUSC", 3,
ifelse(voto$partidoPolítico == "PNR", 4,
5))))
#Los valores nulos los quitamos de la base de datos. Esta nueva base de datos generada estara en la variable voto
voto <- na.omit(Elecciones)
#creamos una variable cuantitativa para los partidos politicos
voto$partido_cuanti <- ifelse(voto$partidoPolítico == "PLN", 1,
ifelse(voto$partidoPolítico == "PAC", 2,
ifelse(voto$partidoPolítico == "PUSC", 3,
ifelse(voto$partidoPolítico == "PNR", 4,
5))))
voto
ggplot(voto, aes(partido_cuanti))
ggplot(voto, aes(partido_cuanti, edad))
ggplot(voto, aes(partido_cuanti, edad))
voto$partido_cuanti
ggplot(voto, aes(partido_cuanti, edad)) +
geom_boxplot(alpha = 0.4, color="blue", aes(group = cut_width(partido_cuanti,1))
)
#Titulo al grafico
ggplot(voto, aes(partido_cuanti, edad)) +
geom_boxplot(alpha = 0.4, color="blue", aes(group = cut_width(partido_cuanti,1))
)+labs(title = "Titutlo", subtitle = "Subtitulo", y="Edad", x="Partido político")
BSDA::z.test(x = interesPol1, y = interesPol2, sigma.x = desvE1, sigma.y = desvE2 ,conf.level = 0.90)$conf.int
interesPol2 <- Elecciones[Elecciones$edad >= 40 ,]$interesPolítica
interesPol2
interesPol1 <- Elecciones[Elecciones$edad < 40 ,]$interesPolítica
#convertimos a numeric
interesPol1 <- as.numeric(interesPol1)
interesPol1
interesPol2 <- as.numeric(interesPol2)
interesPol2
#desviacion estandar
desvE1 <- sd(interesPol1)
desvE1
#omitimos nulos
desvE2 <- na.omit(interesPol2)
desvE2
#desviacion estandar 2
desvE2 <- sd(desvE2)
desvE2
PASWR2::z.test(x = interesPol1, y = interesPol2, sigma.x = desvE1, sigma.y = desvE2 ,conf.level = 0.90)$conf.int
BSDA::z.test(x = interesPol1, y = interesPol2, sigma.x = desvE1, sigma.y = desvE2 ,conf.level = 0.90)$conf.int
library(readxl) #Paquete para leer archivo de excel xlsx
library(epitools)
library(EnvStats)
library(PASWR2) #Paquete que contiene la función z.test para IC Dist Z
library(BSDA) #Paquete#2 que contiene la función z.test para IC Dist Z
library(stests) #Paquete#3 que contiene función z.test para IC Dist Z
library(DataExplorer) #Utilizamos función plot_missing para ver valores nulos
library(ggplot2)
library(readxl) #Paquete para leer archivo de excel xlsx
library(epitools)
library(EnvStats)
library(PASWR2) #Paquete que contiene la función z.test para IC Dist Z
library(BSDA) #Paquete#2 que contiene la función z.test para IC Dist Z
library(stests) #Paquete#3 que contiene función z.test para IC Dist Z
library(DataExplorer) #Utilizamos función plot_missing para ver valores nulos
library(ggplot2)
#Se carga la base de datos. Se almacena la variable Elecciones para ser manipulada.
Elecciones <- read_excel("Datos/Elecciones.xlsx")
Votantes.tradicionales <- Elecciones[Elecciones$partidoPolítico == "PLN" | Elecciones$partidoPolítico == "PUSC",]$edad
Votantes.tradicionales
set.seed(1000)
Votantes.tradicionales.elegidos <- sample(1:length(Votantes.tradicionales),30,replace = TRUE)
muestra.Votantes.tradicionales <- Votantes.tradicionales[Votantes.tradicionales.elegidos]
muestra.Votantes.tradicionales
t.test(muestra.Votantes.tradicionales,conf.level = 0.95)$conf.int
me.muestra.Votantes.tradicionales <- mean(muestra.Votantes.tradicionales)
de.muestra.Votantes.tradicionales <- sd(muestra.Votantes.tradicionales)
cisim(samples = 100, n = 30, parameter = me.muestra.Votantes.tradicionales, sigma = de.muestra.Votantes.tradicionales, conf.level = 0.95)
MujeresEdad <- Elecciones[Elecciones$sexo == "Mujer" & Elecciones$estudios == "Universidad completa" ,]$edad
MujeresEdad
HombresEdad <- Elecciones[Elecciones$sexo == "Hombre" & Elecciones$estudios == "Universidad completa" ,]$edad
HombresEdad
set.seed(1000)
MujeresEdad.elegidas <- sample(1:length(MujeresEdad),30,replace = TRUE)
muestra.MujeresEdad <- MujeresEdad[MujeresEdad.elegidas]
muestra.MujeresEdad
set.seed(1000)
HombresEdad.elegidos<- sample(1:length(HombresEdad),30,replace = TRUE)
muestra.HombresEdad <- HombresEdad[HombresEdad.elegidos]
muestra.HombresEdad
t.test(muestra.HombresEdad ,muestra.MujeresEdad ,conf.level = 0.95)$conf.int
t.test(muestra.MujeresEdad,muestra.HombresEdad ,conf.level = 0.95)$conf.int
PLN  <- Elecciones[Elecciones$partidoPolítico == "PLN" ,]$interesPolítica
PLN <-as.numeric(PLN)
#Cantidad de personas que se inclinan por el PLN
TotalPLN  <- Elecciones[Elecciones$partidoPolítico == "PLN",]$salarioMes
CantidadTotalPLN  <- length(TotalPLN)
CantidadTotalPLN
# Personas del PLN con un posgrado
UniversidadPLN  <- Elecciones[Elecciones$estudios == "Universidad completa" &                Elecciones$partidoPolítico == "PLN",]$estudios
CantidadUniversidadPLN  <- length(UniversidadPLN)
CantidadUniversidadPLN
#Calculando el intervalo
prop.test(x=CantidadUniversidadPLN, n=CantidadTotalPLN, conf.level=0.95)$conf.int
# Realizando el gráfico
cisim(CantidadTotalPLN, CantidadUniversidadPLN, 0.05, type = "Pi", conf.level = 0.95)
#Salario de los votantes del PLN y del PAC que ganan más de 400,000
SalarioPLN  <- Elecciones[Elecciones$partidoPolítico == "PLN" & Elecciones$salarioMes >= 400000,]$salarioMes
SalarioPAC  <- Elecciones[Elecciones$partidoPolítico == "PAC" & Elecciones$salarioMes >= 400000 ,]$salarioMes
SalarioPLN <-as.numeric(SalarioPLN)
SalarioPAC <-as.numeric(SalarioPAC)
SalarioPAC
SalarioPLN
#Aquí se obtiene la cantidad de las personas que se inclinan por cada partido y que ganan más de 400 000 colones.
#Cantidad de personas que se inclinan por cada partido y que ganan más de 400000
CantidadPLN <- length(SalarioPLN)
CantidadPAC <- length(SalarioPAC)
CantidadPLN
CantidadPAC
library(readxl) #Paquete para leer archivo de excel xlsx
library(epitools)
library(EnvStats)
library(PASWR2) #Paquete que contiene la función z.test para IC Dist Z
library(BSDA) #Paquete#2 que contiene la función z.test para IC Dist Z
library(stests) #Paquete#3 que contiene función z.test para IC Dist Z
library(DataExplorer) #Utilizamos función plot_missing para ver valores nulos
library(ggplot2)
